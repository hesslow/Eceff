function [EceffOverEctot] = calculate_Eceff(Z, Z0, nj,  T,B )
    %CALCULATE_ECEFF calculates the effective critical field as in Eq(26) in
    % Hesslow et al,. submitted to PPCF (2018)
    % for a plasma composition with any fully ionized species in combination
    % with partially ionized neon and/or argon
    %   INPUT:
    %       Z   : atomic number of each ion species
    %       Z0  : net charge of plasma for each ion species
    %       nj  : density of each ion species [m^(-3)]
    %       Z, Z0 and nj must be vectors of length nSpecies
    %       T   :  temperature [eV]  (for calculation of the Coulomb logarithm)
    %       B   : magnetic field [T]
    %   OUTPUT:
    %       Eceff/Ectot, where Ectot = (ntot / ne) E_c =
    %                = ntot e^3 lnLStar/(4 pi epsilon_0^2 m_e c^2)
    % written by Linnea Hesslow, 2018-02-12

    ALPHA = 1/137.036;
    atomicSymbolList = {'Ne', 'Ar','Kr'};
    atomicNumberList = [10,18,36];
    
    % the mean excitation energy
    ln_I = struct('Ar0', -7.9050,... 
        'Ar1', -7.7532,...
        'Ar2', -7.6076,...
        'Ar3', -7.4626,...
        'Ar4', -7.3178,...
        'Ar5', -7.1665,...
        'Ar6', -7.0055,...
        'Ar7', -6.8020,...
        'Ar8', -6.5538,...
        'Ar9', -6.4647,...
        'Ar10', -6.3644,...
        'Ar11', -6.2465,...
        'Ar12', -6.1070,...
        'Ar13', -5.9219,...
        'Ar14', -5.6535,...
        'Ar15', -5.3213,...
        'Ar16', -4.6937,...
        'Ar17', -4.6598,...
        'Ne0', -8.2227,...
        'Ne1', -8.0370,...
        'Ne2', -7.8614,...
        'Ne3', -7.6837,...
        'Ne4', -7.4994,...
        'Ne5', -7.2788,...
        'Ne6', -6.9808,...
        'Ne7', -6.5976,...
        'Ne8', -5.8933,...
        'Ne9', -5.8320,...
        'Kr1', -7.2805); %estimated value (Kr0 from ICRU-37)
    
    % screening length constants using the the TF-DFT model
    ln_aBar = struct('Ar0', 4.5677,...
        'Ar1', 4.5007,...
        'Ar2', 4.4289,...
        'Ar3', 4.3513,...
        'Ar4', 4.2698,...
        'Ar5', 4.1815,...
        'Ar6', 4.0829,...
        'Ar7', 3.9748,...
        'Ar8', 3.8511,...
        'Ar9', 3.7882,...
        'Ar10', 3.7203,...
        'Ar11', 3.6436,...
        'Ar12', 3.5579,...
        'Ar13', 3.4525,...
        'Ar14', 3.3093,...
        'Ar15', 3.0503,...
        'Ar16', 2.5578,...
        'Ar17', 2.5332,...
        'Ne0', 4.7064,...
        'Ne1', 4.6097,...
        'Ne2', 4.5028,...
        'Ne3', 4.3858,...
        'Ne4', 4.2638,...
        'Ne5', 4.1266,...
        'Ne6', 3.9568,...
        'Ne7', 3.6810,...
        'Ne8', 3.1777,...
        'Ne9', 3.1278,...
        'Kr1', 4.1278); % Kr1 obtained with the Kirillov model
    
    Z = Z(:);
    Z0 = Z0(:);
    nj = nj(:);

    % test ion species input
    if any( [size(Z,2) size(Z0,2) size(nj,2)]~=1) || numel(Z)~= numel(Z0) || numel(Z)~= numel(nj)
        error('Z, Z0 and nj must be vectors of length nSpecies')
    end
    Ne = Z-Z0; %number of bound elecrons
    if any((Ne > Z) | (Z0 > Z))
        error('Partially ionized atoms must fulfill 0 <= Z0 <= Z');
    end
    partiallyIonizedSpecies = find(Ne > 0)'; % all partially ionized species

    for iZ = Z(partiallyIonizedSpecies)'
        if ~any(iZ==atomicNumberList)
            error('This script only includes data for partially ionized Ne and Ar.');
        end
    end

    ne_free = Z0' * nj; 
    ntot = Z' * nj;
    Zeff = (Z0.^2' * nj)/ne_free;
    Zfulleff = (Z.^2' * nj)/ne_free;
    lnLStar = 14.6 + 0.5 * log(T ./ (ne_free/1e20));

    % calculate the constants nuD0, nuD1, nuS0, nuS1
    nuD0 = (1 + Zeff) - 2/3 * (Ne.^2' * nj)/ne_free /lnLStar;
    nuD1 = Zfulleff/lnLStar;
    nuS0 = 1;
    nuS1 = (1 + 3 * (Ne' * nj)/ne_free)/(2*lnLStar);
    for i = partiallyIonizedSpecies
        atomicSymbol = atomicSymbolList{Z(i)==atomicNumberList};
        speciesName = [atomicSymbol num2str(Z0(i))];
        nuD0 = nuD0 + (Z(i)^2 - Z0(i)^2) * ln_aBar.(speciesName) * (nj(i)/ne_free) / lnLStar;
        nuS0 = nuS0 + Ne(i) * (-ln_I.(speciesName)-1) * (nj(i)/ne_free) / lnLStar;
    end

    %synchrotron radiation term
    tauRadInv =  B^2/(ne_free/1e20)/(15.44*lnLStar);

    %bremsstrahlung term
    bremsprefactor = ALPHA * Zfulleff/lnLStar;
    phib1 = bremsprefactor*0.35;
    phib2 = bremsprefactor*0.20;

    pc0 = nuD0/(2*nuS1);
    calcEceff = @(delta) nuS0 + nuS1*( (1+nuD1/nuD0)*log(pc0) + sqrt(2*delta+1));
    calcDelta = @(Eceff) (nuD0/nuS1^2)*(nuD0*tauRadInv/Eceff+phib1+phib2*log(pc0));

    Ectot = ntot/ne_free; % in units of E_c
    Eceff0 = Ectot;
    delta0 = calcDelta(Eceff0);
    delta1 = calcDelta(calcEceff(delta0));

    EceffOverEctot = calcEceff(delta1)/Ectot;
end
